#include <iostream>
using namespace std;

class Node
{
public:
    int value; 
    Node* next;
    Node* prev;
    Node(int val)
    {
        cout << "Node constructor!" << endl;
        this->value=val;
        this->next=(Node*)0;
        this->prev=(Node*)0;
    }
    ~Node()
    {
        cout << "Node destructor" << endl;
        cout << "I had the value "<< this->value << endl;
    }
};

class List
{
public:
    Node* head;
    Node* tail;

    List()
    {
        cout << "List constructor!" << endl;
        this->head=0;
        this->tail=0;
    }
    ~List()
    {
        cout << "List destructor!" << endl;
        cout << "Todo: properly delete nodes..." << endl;
    }

    void insert(Node* n, Node* x)
    {
        if (n!=0)
        {
            x->next=n->next;
            n->next=x;
            x->prev=n;
            if (x->next!=0)
                x->next->prev=x;
        }
        if (this->head==0)
        {
            this->head=x;
            this->tail=x;
            x->prev=0;
            x->next=0;
        }
        else if (this->tail==n)
        {
            this->tail=x;
        }
    }

    void remove(Node* n)
    {
        if(n->prev != 0){
            n->prev->next = n->next;
        }
        else{
            this->head = n->next;
        }
        if(n->next != 0){
            n->next->prev = n->prev;
        }
        else{
            this->tail = n->prev;
        }
    }

    void display()
    {
        Node* i=this->head;
        cout << "List: " ;
        while(i!=0)
        {
            cout << i->value << " ";
            i=i->next;
        }
        cout << endl;
    }
};

int main(int argc, char *argv[])
{
    List* l=new List();
    Node* a = new Node(4);
    Node* b = new Node(6);
    Node* c = new Node(8);
    
    l->insert(0,a);
    l->insert(l->head,b);
    l->insert(b,c);
    
    l->display();
    l->remove(b);
    l->display();
    
	delete a;
	delete b;
	delete c;
	delete l;
    return 0;
}
